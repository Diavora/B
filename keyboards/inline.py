# keyboards/inline.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from urllib.parse import quote_plus

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---

def get_disputes_list_keyboard(disputes):
    builder = InlineKeyboardBuilder()
    for dispute in disputes:
        builder.button(
            text=f"–°–ø–æ—Ä #{dispute['id']} - {dispute['item_name']}", 
            callback_data=f"admin_dispute_{dispute['id']}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_dispute_resolution_keyboard(deal_id, buyer_id, seller_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", callback_data=f"resolve_{deal_id}_to_{buyer_id}")
    builder.button(text="‚òëÔ∏è –í –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=f"resolve_{deal_id}_to_{seller_id}")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–ø–æ—Ä–æ–≤", callback_data="manage_disputes")
    builder.adjust(2, 1)
    return builder.as_markup()

def get_admin_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üí∞ –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="give_balance")
    builder.button(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="get_user_info")
    builder.button(text="‚öñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä–∞–º–∏", callback_data="manage_disputes")
    builder.button(text="üö® –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_reset_data_confirm") # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    builder.adjust(1)
    return builder.as_markup()

def get_back_to_admin_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    return builder.as_markup()

def get_admin_reset_confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="admin_reset_data_execute")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_menu")
    builder.adjust(2)
    return builder.as_markup()

# --- –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò ---

def get_support_reply_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"answer_to_{user_id}")
    return builder.as_markup()

def get_cancel_support_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_support")
    return builder.as_markup()


# --- –û–°–ù–û–í–ù–´–ï –ú–ï–ù–Æ ---

def get_main_menu_inline():
    builder = InlineKeyboardBuilder()
    builder.button(text="üõí –ú–∞—Ä–∫–µ—Ç", callback_data="market_menu")
    builder.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    builder.button(text="ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    builder.adjust(2)
    return builder.as_markup()

def get_market_menu_inline():
    builder = InlineKeyboardBuilder()
    builder.button(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="buy_menu")
    builder.button(text="üî¥ –ü—Ä–æ–¥–∞—Ç—å", callback_data="sell_item")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(2, 1)
    return builder.as_markup()

def get_profile_keyboard(user_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up_balance")
    builder.button(text="‚ûñ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw_balance")
    builder.button(text="üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data="my_deals")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(2, 1, 1)
    return builder.as_markup()

# --- –ü–†–û–¶–ï–°–° –ü–û–ö–£–ü–ö–ò ---

def get_games_keyboard(games, callback_prefix="game_"):
    builder = InlineKeyboardBuilder()
    for game_id, game_name in games:
        builder.button(text=game_name, callback_data=f"{callback_prefix}{game_id}")
    
    if callback_prefix == "sell_game_":
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    else:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞—Ä–∫–µ—Ç", callback_data="market_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_items_keyboard(items, game_id, page, total_items, per_page=5):
    builder = InlineKeyboardBuilder()
    for item in items:
        server_tag = f" ({item['server']})" if item.get('server') else ""
        builder.button(
            text=f"{item['name']}{server_tag} - {item['price']:.2f} RUB",
            callback_data=f"item_{item['id']}_{game_id}_{page}"
        )
    total_pages = (total_items + per_page - 1) // per_page
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"items_page_{game_id}_{page-1}"))
    if total_pages > 1:
        pagination_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"items_page_{game_id}_{page+1}"))

    if pagination_buttons:
        builder.row(*pagination_buttons)

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã", callback_data="buy_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_open_sell_webapp_keyboard(game_id, game_name, server, web_app_url):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏."""
    builder = InlineKeyboardBuilder()
    
    game_name_encoded = quote_plus(game_name)
    
    url = f"{web_app_url}/sell.html?gameId={game_id}&gameName={game_name_encoded}"
    
    if server:
        server_encoded = quote_plus(server)
        url += f"&server={server_encoded}"
        
    builder.button(
        text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞",
        web_app=WebAppInfo(url=url)
    )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="market_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_item_details_keyboard(item_details, game_id, page, web_app_url):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è Web App."""
    builder = InlineKeyboardBuilder()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    item_name_encoded = quote_plus(item_details['name'])
    item_desc_encoded = quote_plus(item_details['description'])
    seller_username_encoded = quote_plus(item_details['seller_username'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Web App —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏, camelCase –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç JS
    url = (
        f"{web_app_url}?itemId={item_details['id']}"
        f"&itemName={item_name_encoded}"
        f"&itemDescription={item_desc_encoded}"
        f"&itemPrice={item_details['price']}"
        f"&sellerUsername={seller_username_encoded}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é Web App
    web_app_button = InlineKeyboardButton(
        text="‚úÖ –ö—É–ø–∏—Ç—å",
        web_app=WebAppInfo(url=url)
    )
    builder.row(web_app_button)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"items_page_{game_id}_{page}")
    
    return builder.as_markup()

# --- –ü–†–û–¶–ï–°–° –ü–†–û–î–ê–ñ–ò ---

def get_sell_games_keyboard(games):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –≤ –º–µ–Ω—é –ø—Ä–æ–¥–∞–∂–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é get_games_keyboard —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.
    """
    return get_games_keyboard(games, callback_prefix="sell_game_")

def get_sell_servers_keyboard(game_id, servers, page=1, per_page=16):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    
    start = (page - 1) * per_page
    end = start + per_page
    
    # –ö–Ω–æ–ø–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
    for server in servers[start:end]:
        builder.button(text=server, callback_data=f"sell_server_{server}")
    
    builder.adjust(2) # –ü–æ 2 —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä—è–¥

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sell_server_page_{page - 1}"))
    if end < len(servers):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"sell_server_page_{page + 1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã", callback_data="sell_item")
    builder.adjust(1)
    return builder.as_markup()

def get_open_sell_form_keyboard(url):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App (–¥–ª—è –∏–≥—Ä –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤)."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ",
        web_app=WebAppInfo(url=url)
    )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã", callback_data="sell_item")
    builder.adjust(1)
    return builder.as_markup()


# --- –°–î–ï–õ–ö–ò ---

def get_deal_details_keyboard(deal_info, current_user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–¥–µ–ª–∫–∏."""
    builder = InlineKeyboardBuilder()
    status = deal_info['status']
    deal_id = deal_info['id']

    if status == 'in_progress':
        if current_user_id == deal_info['seller_id']:
            builder.button(text="‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–≤–∞—Ä", callback_data=f"confirm_sent_{deal_id}")
        elif current_user_id == deal_info['buyer_id']:
            # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∂–¥–µ—Ç
            pass
    elif status == 'item_sent':
        if current_user_id == deal_info['buyer_id']:
            builder.button(text="‚úÖ –Ø –ø–æ–ª—É—á–∏–ª —Ç–æ–≤–∞—Ä", callback_data=f"confirm_received_{deal_id}")
    
    # –ö–Ω–æ–ø–∫–∞ —Å–ø–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö
    if status in ['in_progress', 'item_sent']:
         builder.button(text="‚öñÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"open_dispute_{deal_id}")

    builder.button(text="‚¨ÖÔ∏è –ö –º–æ–∏–º —Å–¥–µ–ª–∫–∞–º", callback_data="my_deals")
    builder.adjust(1)
    return builder.as_markup()

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data="cancel_sell_item"))

    return builder.as_markup()


def get_server_search_results_keyboard(found_servers):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤."""
    builder = InlineKeyboardBuilder()
    for server in found_servers[:24]: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 24 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ–∫
        builder.button(text=server, callback_data=f"sell_server_{server}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É", callback_data="sell_server_show_full_list"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data="cancel_sell_item"))
    return builder.as_markup()


def get_server_search_failed_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="sell_server_search")
    builder.button(text="‚¨ÖÔ∏è –ö –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É", callback_data="sell_server_show_full_list")

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–î–ï–õ–ö–ê–ú–ò ---

def get_my_deals_keyboard(deals):
    builder = InlineKeyboardBuilder()
    if deals:
        for deal in deals:
            builder.button(
                text=f"–°–¥–µ–ª–∫–∞ #{deal['id']} - {deal['item_name']}", 
                callback_data=f"deal_details_{deal['id']}"
            )
        builder.adjust(1)
    builder.button(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="deal_history")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.adjust(1)
    return builder.as_markup()

def get_deal_history_keyboard(deals):
    builder = InlineKeyboardBuilder()
    for deal in deals:
        status_emoji = {'completed': '‚úÖ', 'cancelled': '‚ùå'}.get(deal['status'], '‚ùî')
        role_emoji = "üõí" if deal['role'] == 'purchase' else "üí∞"
        text = f"{status_emoji} {role_emoji} –°–¥–µ–ª–∫–∞ #{deal['id']} - {deal['item_name']} ({deal['status']})"
        builder.button(text=text, callback_data=f"deal_details_{deal['id']}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–¥–µ–ª–∫–∞–º", callback_data="my_deals")
    builder.adjust(1)
    return builder.as_markup()

def get_deal_details_keyboard(deal_info, user_id):
    builder = InlineKeyboardBuilder()
    deal_id = deal_info['id']
    status = deal_info['status']
    is_buyer = user_id == deal_info['buyer_id']

    if status == 'in_progress':
        if not is_buyer:  # –ü—Ä–æ–¥–∞–≤–µ—Ü
            builder.button(text="‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–≤–∞—Ä", callback_data=f"deal_action_sent_{deal_id}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"deal_action_cancel_{deal_id}")
        builder.button(text="‚ùóÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"deal_action_dispute_{deal_id}")

    elif status == 'item_sent':
        if is_buyer:  # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å
            builder.button(text="‚úÖ –Ø –ø–æ–ª—É—á–∏–ª —Ç–æ–≤–∞—Ä", callback_data=f"deal_action_confirm_{deal_id}")
        builder.button(text="‚ùóÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"deal_action_dispute_{deal_id}")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å—Ç—å –≤—Å–µ–≥–¥–∞
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–∞–º", callback_data="my_deals")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, –æ–Ω–∏ –±—É–¥—É—Ç —Å–≤–µ—Ä—Ö—É.
    # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥".
    action_buttons_count = len(list(builder.buttons)) - 1  # –í—ã—á–∏—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if action_buttons_count > 0:
        builder.adjust(*([1] * action_buttons_count), 1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ, –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ —Å–≤–æ–µ–π
    else:
        builder.adjust(1)

    return builder.as_markup()

# --- FSM (–î–õ–Ø –û–¢–ú–ï–ù–´) ---

def get_cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_fsm")
    return builder.as_markup()


# --- –ü–†–û–¶–ï–°–° –í–´–í–û–î–ê –°–†–ï–î–°–¢–í ---

def get_withdraw_country_keyboard(countries):
    builder = InlineKeyboardBuilder()
    for code, data in countries.items():
        builder.button(text=data['name'], callback_data=f"withdraw_country_{code}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.adjust(1)
    return builder.as_markup()

def get_withdraw_bank_keyboard(country_code, banks):
    builder = InlineKeyboardBuilder()
    for code, bank_data in banks.items():
        builder.button(text=bank_data['name'], callback_data=f"withdraw_bank_{country_code}_{code}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="withdraw_balance")
    builder.adjust(1)
    return builder.as_markup()

def get_withdraw_confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="confirm_withdrawal")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profile")
    return builder.as_markup()


# --- –ü–†–û–¶–ï–°–° –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê ---

def get_country_keyboard(countries):
    builder = InlineKeyboardBuilder()
    for code, data in countries.items():
        builder.button(text=data['name'], callback_data=f"deposit_country_{code}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.adjust(1)
    return builder.as_markup()

def get_bank_keyboard(country_code, banks):
    builder = InlineKeyboardBuilder()
    for code, bank_data in banks.items():
        builder.button(text=bank_data['name'], callback_data=f"deposit_bank_{country_code}_{code}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="top_up_balance")
    builder.adjust(1)
    return builder.as_markup()

def get_payment_confirmation_keyboard(country_code, bank_code):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")
    builder.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –±–∞–Ω–∫", callback_data=f"deposit_country_{country_code}")
    builder.adjust(1)
    return builder.as_markup()


# --- –û–ë–©–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def get_back_to_profile_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    return builder.as_markup()


def get_back_to_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    return builder.as_markup()
