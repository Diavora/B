# handlers/market.py

from aiogram import Router, F, Bot
import json
from aiogram.types import Message, CallbackQuery, WebAppInfo, PreCheckoutQuery
from aiogram.exceptions import TelegramBadRequest

from keyboards.inline import (
    get_games_keyboard,
    get_items_keyboard,
    get_deal_details_keyboard,
    get_item_details_keyboard
)
from utils.db import (
    get_games,
    get_items_by_game,
    get_item_details,
    update_item_status, 
    get_user_balance,
    update_user_balance,
    get_user_profile
)
from config import WEB_APP_URL, SELLING_PRICE_COMMISSION

router = Router()

def get_deal_text(deal_info, current_user_id):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–¥–µ–ª–∫–∏.
    """
    status_map = {
        'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'item_sent': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
        'in_dispute': '–û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä'
    }

    if current_user_id == deal_info['buyer_id']:
        role = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
        partner_username = deal_info.get('seller_username', '–°–∏—Å—Ç–µ–º–∞')
    else:
        role = "–ü—Ä–æ–¥–∞–≤–µ—Ü"
        partner_username = deal_info.get('buyer_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    server_info = f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {deal_info['server']}\n" if deal_info.get('server') else ""

    return (
        f"üìã –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ #{deal_info['id']}\n\n"
        f"üîπ –¢–æ–≤–∞—Ä: {deal_info['item_name']}\n"
        f"{server_info}"
        f"üí∞ –°—É–º–º–∞: {deal_info['price']:.2f} RUB\n\n"
        f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {role}\n"
        f"üë• –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä: @{partner_username}\n\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status_map.get(deal_info['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}</b>"
    )


# --- CUSTOM FILTER ---
def is_purchase_data(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–∫—É–ø–∫–µ."""
    try:
        data = json.loads(message.web_app_data.data)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ type —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º purchase_item
        return data.get('type') == 'purchase_item' and 'itemId' in data
    except (json.JSONDecodeError, AttributeError):
        return False

# --- –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ò–ó WEB APP ---

@router.message(F.web_app_data, is_purchase_data)
async def process_purchase_web_app_data(message: Message, bot: Bot):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∏–∑ Web App.
    """
    try:
        data = json.loads(message.web_app_data.data)
        item_id = int(data['itemId'])
    except (json.JSONDecodeError, KeyError, ValueError):
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
    item_details = get_item_details(item_id)
    if not item_details or item_details.get('status') != 'on_sale':
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏
        await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    buyer_id = message.from_user.id
    seller_id = item_details.get('seller_id')

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä
    if seller_id and seller_id == buyer_id:
        await message.answer("ü§î –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä.")
        return

    # 3. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 'sold'
    update_item_status(item_id, 'sold')

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if seller_id:
        try:
            seller_message = (
                f"üéâ –í–∞—à —Ç–æ–≤–∞—Ä ¬´<b>{item_details['name']}</b>¬ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω!\n\n"
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                f"–°—É–º–º–∞: {item_details['price']:.2f} RUB\n\n"
                f"–°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –∞ –ø–æ–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏."
            )
            await bot.send_message(seller_id, seller_message, parse_mode="HTML")
        except TelegramBadRequest:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É {seller_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    # 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç)
    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–±—Ä–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ —é–∑–µ—Ä —É–∂–µ –≤–∏–¥–∏—Ç success screen
    await bot.send_message(chat_id=message.from_user.id, text=f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {item_details['name']}\n–¶–µ–Ω–∞: {item_details['price']} ‚ÇΩ\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü (@{item_details['seller_username']}) —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.", parse_mode="HTML")

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç web_server.py ---

async def process_purchase_from_web(bot: Bot, user_id: int, item_id: int) -> dict:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–µ—Ä–µ–∑ API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    item_details = get_item_details(item_id)
    if not item_details or item_details['status'] != 'active':
        return {'status': 'error', 'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω.'}

    seller_id = item_details['seller_id']
    if user_id == seller_id:
        return {'status': 'error', 'message': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä.'}

    user_balance = get_user_balance(user_id)
    item_price = item_details['price']
    if user_balance < item_price:
        return {'status': 'error', 'message': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ'}

    # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    update_user_balance(user_id, -item_price) # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    update_user_balance(seller_id, item_price) # –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É
    update_item_status(item_id, 'sold') # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    await bot.send_message(
        chat_id=user_id, 
        text=f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {item_details['name']}\n–¶–µ–Ω–∞: {item_price} ‚ÇΩ\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü (@{item_details['seller_username']}) —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.",
        parse_mode="HTML"
    )
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
    await bot.send_message(
        chat_id=seller_id, 
        text=f"üîî <b>–í–∞—à —Ç–æ–≤–∞—Ä –∫—É–ø–∏–ª–∏!</b>\n\n–¢–æ–≤–∞—Ä: {item_details['name']}\n–¶–µ–Ω–∞: {item_price} ‚ÇΩ\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{get_user_profile(user_id)['username']}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.",
        parse_mode="HTML"
    )

    return {'status': 'success', 'message': '–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!'}


# --- –†–ê–ó–î–ï–õ –ü–û–ö–£–ü–ö–ò ---

@router.callback_query(F.data == "buy_menu")
async def buy_menu_handler(callback: CallbackQuery):
    games = get_games()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=get_games_keyboard(games))


@router.callback_query(F.data.startswith("game_"))
async def game_handler(callback: CallbackQuery):
    game_id = int(callback.data.split("_")[1])
    page = 1
    items, total_items = get_items_by_game(game_id, page=page)

    if not items:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_items_keyboard(items, game_id, page, total_items)
    )


@router.callback_query(F.data.startswith("items_page_"))
async def items_page_handler(callback: CallbackQuery):
    try:
        _, _, game_id_str, page_str = callback.data.split("_")
        game_id = int(game_id_str)
        page = int(page_str)
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        return

    items, total_items = get_items_by_game(game_id, page=page)

    if not items:
        await callback.answer("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=get_items_keyboard(items, game_id, page, total_items)
        )
    except TelegramBadRequest:
        await callback.answer() # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"


@router.callback_query(F.data.startswith("item_"))
async def item_handler(callback: CallbackQuery):
    try:
        _, item_id_str, game_id_str, page_str = callback.data.split("_")
        item_id = int(item_id_str)
        game_id = int(game_id_str)
        page = int(page_str)
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    item_details = get_item_details(item_id)

    if not item_details:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = (
        f"<b>{item_details['name']}</b>\n\n"
        f"{item_details['description']}\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {item_details['price']} RUB\n"
        f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @{item_details['seller_username']}"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_item_details_keyboard(item_details, game_id, page, WEB_APP_URL),
        parse_mode="HTML"
    )
