# handlers/profile.py

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from keyboards.inline import (
    get_profile_keyboard, get_my_deals_keyboard, get_deal_history_keyboard, 
    get_deal_details_keyboard, get_cancel_keyboard,
    get_withdraw_country_keyboard, get_withdraw_bank_keyboard, get_withdraw_confirmation_keyboard,
    get_country_keyboard, get_bank_keyboard, get_payment_confirmation_keyboard, get_back_to_profile_keyboard
)
from utils import db
from utils.db import update_deal_status, get_deal_info, add_balance, get_user_balance, get_user_deal_stats
from states import TopUpState, WithdrawState
from config import ADMIN_IDS, PAYMENT_SYSTEMS

router = Router()


def get_deal_text(deal_info, current_user_id):
    status_map = {
        'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'item_sent': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
        'in_dispute': '–û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä'
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_user_id == deal_info['buyer_id']:
        role = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
        partner_username = deal_info['seller_username']
    else:
        role = "–ü—Ä–æ–¥–∞–≤–µ—Ü"
        partner_username = deal_info['buyer_username']

    server_info = f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {deal_info['server']}\n" if deal_info.get('server') else ""

    return (
        f"üìã –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ #{deal_info['id']}\n\n"
        f"üîπ –¢–æ–≤–∞—Ä: {deal_info['item_name']}\n"
        f"{server_info}"
        f"üí∞ –°—É–º–º–∞: {deal_info['price']:.2f} RUB\n\n"
        f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {role}\n"
        f"üë• –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä: @{partner_username}\n\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status_map.get(deal_info['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}</b>"
    )

# --- –•–ï–ù–î–õ–ï–†–´ –ü–†–û–§–ò–õ–Ø ---

@router.message(F.text == "/profile")
async def profile_handler(message: Message):
    user_id = message.from_user.id
    profile_data = db.get_user_profile(user_id)
    deal_stats = db.get_user_deal_stats(user_id)

    if profile_data and deal_stats is not None:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date = profile_data['registration_date'].split(' ')[0]

        text = (
            f"<b>‚öúÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å ‚öúÔ∏è</b>\n\n"
            f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{profile_data['user_id']}</code>\n"
            f"üë§ <b>–ù–∏–∫–Ω–µ–π–º:</b> @{profile_data['username']}\n\n"
            f"--- –§–∏–Ω–∞–Ω—Å—ã ---\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {profile_data['balance']:.2f} RUB\n"
            f"‚ùÑÔ∏è <b>–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> {profile_data['frozen_balance']:.2f} RUB\n\n"
            f"--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {deal_stats['completed_deals']}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}"
        )
    else:
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è."
    await message.answer(text, reply_markup=get_profile_keyboard(), parse_mode="HTML")

@router.callback_query(F.data == "profile")
async def profile_callback_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    profile_data = db.get_user_profile(user_id)
    deal_stats = db.get_user_deal_stats(user_id)

    if profile_data and deal_stats is not None:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date = profile_data['registration_date'].split(' ')[0]

        text = (
            f"<b>‚öúÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å ‚öúÔ∏è</b>\n\n"
            f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{profile_data['user_id']}</code>\n"
            f"üë§ <b>–ù–∏–∫–Ω–µ–π–º:</b> @{profile_data['username']}\n\n"
            f"--- –§–∏–Ω–∞–Ω—Å—ã ---\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {profile_data['balance']:.2f} RUB\n"
            f"‚ùÑÔ∏è <b>–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> {profile_data['frozen_balance']:.2f} RUB\n\n"
            f"--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {deal_stats['completed_deals']}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}"
        )
    else:
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è."

    await callback.message.edit_text(text, reply_markup=get_profile_keyboard(user_id), parse_mode="HTML")
    await callback.answer()

# --- –ü–†–û–¶–ï–°–° –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê ---

@router.callback_query(F.data == "top_up_balance")
async def top_up_balance_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TopUpState.choosing_country)
    await callback.message.edit_text(
        "<b>üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_country_keyboard(PAYMENT_SYSTEMS),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(TopUpState.choosing_country, F.data.startswith("deposit_country_"))
async def deposit_country_chosen_handler(callback: CallbackQuery, state: FSMContext):
    country_code = callback.data.split("_")[2]
    await state.update_data(country_code=country_code)
    await state.set_state(TopUpState.choosing_bank)
    
    country_name = PAYMENT_SYSTEMS[country_code]['name']
    banks = PAYMENT_SYSTEMS[country_code]['banks']
    await callback.message.edit_text(
        f"<b>–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞:</b> {country_name}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:",
        reply_markup=get_bank_keyboard(country_code, banks),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(TopUpState.choosing_bank, F.data.startswith("deposit_bank_"))
async def deposit_bank_chosen_handler(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    country_code = parts[2]
    bank_code = parts[3]
    await state.update_data(bank_code=bank_code)
    await state.set_state(TopUpState.entering_amount)

    bank_name = PAYMENT_SYSTEMS[country_code]['banks'][bank_code]['name']
    currency = PAYMENT_SYSTEMS[country_code]['currency']
    
    await callback.message.edit_text(
        f"üè¶ <b>–ë–∞–Ω–∫:</b> {bank_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
        f"‚û°Ô∏è <b>–°—É–º–º–∞ –≤ {currency}:</b>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TopUpState.entering_amount)
async def deposit_amount_entered_handler(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_cancel_keyboard())
            return
        await state.update_data(amount=amount)
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_cancel_keyboard())
        return

    data = await state.get_data()
    country_code = data['country_code']
    bank_code = data['bank_code']
    
    bank_info = PAYMENT_SYSTEMS[country_code]['banks'][bank_code]
    requisites = bank_info['requisites']
    bank_name = bank_info['name']
    currency = PAYMENT_SYSTEMS[country_code]['currency']

    text = (
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ.</b>\n\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"<b>–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</b> {bank_name}\n"
        f"<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>{requisites}</code>\n"
        f"<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{amount:.2f} {currency}</code>\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª."
    )
    
    await state.set_state(TopUpState.confirming_payment)
    await message.answer(text, reply_markup=get_payment_confirmation_keyboard(country_code, bank_code), parse_mode="HTML")

@router.callback_query(TopUpState.confirming_payment, F.data == "check_payment")
async def check_payment_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=get_back_to_profile_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# --- –•–ï–ù–î–õ–ï–†–´ –°–î–ï–õ–û–ö ---

@router.callback_query(F.data == "my_deals")
async def my_deals_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    deals = db.get_user_deals(user_id, status=('in_progress', 'item_sent', 'in_dispute'))
    await callback.message.edit_text(
        "<b>ü§ù –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Å–¥–µ–ª–∫–∏:</b>",
        reply_markup=get_my_deals_keyboard(deals),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "deal_history")
async def deal_history_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    deals = db.get_user_deals(user_id, status=('completed', 'cancelled'))
    await callback.message.edit_text(
        "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫:</b>",
        reply_markup=get_deal_history_keyboard(deals),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("deal_details_"))
async def deal_details_handler(callback: CallbackQuery):
    try:
        deal_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–¥–µ–ª–∫–∏.", show_alert=True)
        return

    user_id = callback.from_user.id
    result = db.get_deal_info(deal_id)

    if result['status'] != 'success':
        await callback.message.edit_text("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=get_back_to_profile_keyboard())
        await callback.answer()
        return

    deal_info = result['data']
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏
    if user_id not in [deal_info['buyer_id'], deal_info['seller_id']]:
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.", show_alert=True)
        return

    text = get_deal_text(deal_info, user_id)
    keyboard = get_deal_details_keyboard(deal_info, user_id)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# --- –î–ï–ô–°–¢–í–ò–Ø –í –°–î–ï–õ–ö–ï ---

async def update_deal_message(callback: CallbackQuery, deal_info: dict):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ."""
    user_id = callback.from_user.id
    text = get_deal_text(deal_info, user_id)
    keyboard = get_deal_details_keyboard(deal_info, user_id)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("deal_action_sent_"))
async def item_sent_handler(callback: CallbackQuery, bot: Bot):
    deal_id = int(callback.data.split('_')[3])
    user_id = callback.from_user.id

    result = db.update_deal_status(deal_id, 'item_sent', user_id)

    if result['status'] == 'success':
        deal_info = result['data']
        await update_deal_message(callback, deal_info)
        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        try:
            await bot.send_message(
                deal_info['buyer_id'],
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {deal_info['buyer_id']}: {e}")
    elif result['status'] == 'not_seller':
        await callback.answer("‚ùóÔ∏è –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
    elif result['status'] == 'wrong_status':
        await callback.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
    else:
        await callback.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("deal_action_confirm_"))
async def confirm_deal_handler(callback: CallbackQuery, bot: Bot):
    deal_id = int(callback.data.split('_')[3])
    user_id = callback.from_user.id

    result = db.complete_deal(deal_id, user_id)

    if result['status'] == 'success':
        deal_info = result['data']
        await update_deal_message(callback, deal_info)
        await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        try:
            await bot.send_message(
                deal_info['seller_id'],
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É {deal_info['seller_id']}: {e}")
    elif result['status'] == 'not_buyer':
        await callback.answer("‚ùóÔ∏è –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
    elif result['status'] == 'wrong_status':
        await callback.answer("‚ùóÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
    else:
        await callback.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("deal_action_cancel_"))
async def cancel_deal_handler(callback: CallbackQuery, bot: Bot):
    deal_id = int(callback.data.split('_')[3])
    user_id = callback.from_user.id

    result = db.cancel_deal(deal_id, user_id)

    if result['status'] == 'success':
        deal_info = result['data']
        await update_deal_message(callback, deal_info)
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        other_participant_id = deal_info['buyer_id'] if user_id == deal_info['seller_id'] else deal_info['seller_id']
        try:
            await bot.send_message(other_participant_id, f"–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} –æ—Ç–º–µ–Ω–∏–ª –µ—ë.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–± –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")

    elif result['status'] == 'not_participant':
        await callback.answer("‚ùóÔ∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.", show_alert=True)
    elif result['status'] == 'already_finalized':
        await callback.answer("‚ùóÔ∏è –≠—Ç—É —Å–¥–µ–ª–∫—É —É–∂–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", show_alert=True)
    else:
        await callback.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("deal_action_dispute_"))
async def open_dispute_handler(callback: CallbackQuery, bot: Bot):
    deal_id = int(callback.data.split('_')[3])
    user_id = callback.from_user.id

    result = db.open_dispute(deal_id, user_id)

    if result['status'] == 'success':
        deal_info = result['data']
        await update_deal_message(callback, deal_info)
        await callback.answer("‚ùóÔ∏è –°–ø–æ—Ä –æ—Ç–∫—Ä—ã—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        other_participant_id = deal_info['buyer_id'] if user_id == deal_info['seller_id'] else deal_info['seller_id']
        admin_ids = ADMIN_IDS 
        
        try:
            await bot.send_message(other_participant_id, f"‚ùóÔ∏è –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} –æ—Ç–∫—Ä—ã–ª —Å–ø–æ—Ä. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ —Å–ø–æ—Ä–µ: {e}")

        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, f"‚ùóÔ∏è –û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id} –æ —Å–ø–æ—Ä–µ: {e}")

    elif result['status'] == 'not_participant':
        await callback.answer("‚ùóÔ∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.", show_alert=True)
    elif result['status'] == 'already_finalized':
        await callback.answer("‚ùóÔ∏è –°–ø–æ—Ä –ø–æ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –Ω–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å.", show_alert=True)
    else:
        await callback.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


# --- –ü–†–û–¶–ï–°–° –í–´–í–û–î–ê –°–†–ï–î–°–¢–í ---

@router.callback_query(F.data == "withdraw_balance")
async def withdraw_balance_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(WithdrawState.choosing_country)
    await callback.message.edit_text(
        "<b>üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=get_withdraw_country_keyboard(PAYMENT_SYSTEMS),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(WithdrawState.choosing_country, F.data.startswith("withdraw_country_"))
async def withdraw_country_chosen_handler(callback: CallbackQuery, state: FSMContext):
    country_code = callback.data.split("_")[2]
    await state.update_data(country_code=country_code)
    await state.set_state(WithdrawState.choosing_bank)
    
    country_name = PAYMENT_SYSTEMS[country_code]['name']
    banks = PAYMENT_SYSTEMS[country_code]['banks']
    await callback.message.edit_text(
        f"<b>–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞:</b> {country_name}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:",
        reply_markup=get_withdraw_bank_keyboard(country_code, banks),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(WithdrawState.choosing_bank, F.data.startswith("withdraw_bank_"))
async def withdraw_bank_chosen_handler(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    country_code = parts[2]
    bank_code = parts[3]
    await state.update_data(bank_code=bank_code)
    await state.set_state(WithdrawState.entering_amount)

    profile_data = db.get_user_profile(callback.from_user.id)
    balance = profile_data.get('balance', 0)
    bank_name = PAYMENT_SYSTEMS[country_code]['banks'][bank_code]
    currency = PAYMENT_SYSTEMS[country_code]['currency']
    
    await callback.message.edit_text(
        f"<b>–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫:</b> {bank_name}\n"
        f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f} RUB</code>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ <b>{currency}</b>.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(WithdrawState.entering_amount)
async def withdraw_amount_entered_handler(message: Message, state: FSMContext):
    profile_data = db.get_user_profile(message.from_user.id)
    balance = profile_data.get('balance', 0)

    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return
        if amount > balance:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB")
            return
        await state.update_data(amount=amount)
    except (ValueError, TypeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.set_state(WithdrawState.entering_requisites)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ —Å—á–µ—Ç–∞ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=get_cancel_keyboard())

@router.message(WithdrawState.entering_requisites)
async def requisites_entered_handler(message: Message, state: FSMContext):
    await state.update_data(requisites=message.text)
    data = await state.get_data()
    
    country_code = data['country_code']
    bank_code = data['bank_code']
    amount = data['amount']
    requisites = data['requisites']

    country_name = PAYMENT_SYSTEMS[country_code]['name']
    bank_name = PAYMENT_SYSTEMS[country_code]['banks'][bank_code]
    currency = PAYMENT_SYSTEMS[country_code]['currency']

    text = (
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
        f"<b>–°—É–º–º–∞:</b> <code>{amount:.2f} {currency}</code>\n"
        f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name}\n"
        f"<b>–ë–∞–Ω–∫:</b> {bank_name}\n"
        f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> <code>{requisites}</code>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
    )

    await state.set_state(WithdrawState.confirming_withdrawal)
    await message.answer(text, reply_markup=get_withdraw_confirmation_keyboard(), parse_mode="HTML")

@router.callback_query(WithdrawState.confirming_withdrawal, F.data == "confirm_withdrawal")
async def confirm_withdrawal_handler(callback: CallbackQuery, state: FSMContext):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    # –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    data = await state.get_data()
    amount = data.get('amount')
    # db.create_withdrawal_request(user_id=callback.from_user.id, data=data)
    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} RUB —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        "–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
        parse_mode="HTML",
        reply_markup=None
    )
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
@router.callback_query(F.data == "cancel_fsm")
async def cancel_fsm_handler(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer()
        return

    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    await profile_callback_handler(callback) 
    await callback.answer()
