# handlers/admin.py

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_IDS
from keyboards.inline import get_admin_keyboard, get_back_to_admin_menu_keyboard, get_disputes_list_keyboard, get_dispute_resolution_keyboard, get_admin_reset_confirmation_keyboard
from utils.db import get_user_profile, add_balance, get_disputed_deals, resolve_dispute, get_deal_info, reset_all_user_data

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞ ---
class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS

router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ---
class AdminStates(StatesGroup):
    give_balance_user_id = State()
    give_balance_amount = State()
    get_user_info = State()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ ---
@router.message(Command("admin"), IsAdmin())
async def admin_panel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_keyboard())

@router.callback_query(F.data == "admin_menu", IsAdmin())
async def admin_panel_callback_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_keyboard())

# --- –†–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ" ---
@router.callback_query(F.data == "get_user_info", IsAdmin())
async def get_user_info_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.get_user_info)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º:", reply_markup=get_back_to_admin_menu_keyboard())

@router.message(AdminStates.get_user_info, IsAdmin())
async def process_user_info_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_back_to_admin_menu_keyboard())
        return

    user_profile = get_user_profile(user_id)

    if user_profile:
        text = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n"
            f"<b>Username:</b> @{user_profile['username']}\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user_profile['balance']:.2f} RUB\n"
            f"<b>–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> {user_profile['frozen_balance']:.2f} RUB\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_profile['registration_date']}"
        )
        await message.answer(text, parse_mode="HTML", reply_markup=get_back_to_admin_menu_keyboard())
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_to_admin_menu_keyboard())
    
    await state.clear()

# --- –†–∞–∑–¥–µ–ª "–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å" ---
@router.callback_query(F.data == "give_balance", IsAdmin())
async def give_balance_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.give_balance_user_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å:", reply_markup=get_back_to_admin_menu_keyboard())

@router.message(AdminStates.give_balance_user_id, IsAdmin())
async def process_give_balance_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        if not get_user_profile(user_id):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=get_back_to_admin_menu_keyboard())
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_back_to_admin_menu_keyboard())
        return

    await state.update_data(user_id_to_add=user_id)
    await state.set_state(AdminStates.give_balance_amount)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.", parse_mode="HTML", reply_markup=get_back_to_admin_menu_keyboard())

@router.message(AdminStates.give_balance_amount, IsAdmin())
async def process_give_balance_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_back_to_admin_menu_keyboard())
        return

    data = await state.get_data()
    user_id = data.get('user_id_to_add')

    if add_balance(user_id, amount):
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–º–µ—Ä–µ <b>{amount:.2f} RUB</b> —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.", parse_mode="HTML", reply_markup=get_back_to_admin_menu_keyboard())
        try:
            await message.bot.send_message(user_id, f"–í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount:.2f} RUB</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode="HTML")
        except Exception as e:
            await message.answer("(–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)", reply_markup=get_back_to_admin_menu_keyboard())
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", reply_markup=get_back_to_admin_menu_keyboard())

    await state.clear()


# --- –†–∞–∑–¥–µ–ª "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä–∞–º–∏" ---

@router.callback_query(F.data == "manage_disputes", IsAdmin())
async def manage_disputes_handler(callback: CallbackQuery):
    disputes = get_disputed_deals()
    if not disputes:
        await callback.message.edit_text(
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤ –Ω–µ—Ç.",
            reply_markup=get_back_to_admin_menu_keyboard()
        )
        return
    
    await callback.message.edit_text(
        "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã:</b>",
        reply_markup=get_disputes_list_keyboard(disputes),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("admin_dispute_"), IsAdmin())
async def show_dispute_details_handler(callback: CallbackQuery):
    deal_id = int(callback.data.split("_")[2])
    result = get_deal_info(deal_id)

    if result['status'] != 'success':
        await callback.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    deal_info = result['data']

    if deal_info['status'] != 'in_dispute':
        await callback.answer("–°–ø–æ—Ä –ø–æ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç –∏–ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω.", show_alert=True)
        return

    text = (
        f"<b>–†–∞–∑–±–æ—Ä —Å–ø–æ—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}</b>\n\n"
        f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> @{deal_info['buyer_username']} (<code>{deal_info['buyer_id']}</code>)\n"
        f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @{deal_info['seller_username']} (<code>{deal_info['seller_id']}</code>)\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {deal_info['item_name']}\n"
        f"<b>–¶–µ–Ω–∞:</b> {deal_info['price']:.2f} RUB\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, –≤ —á—å—é –ø–æ–ª—å–∑—É —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–ø–æ—Ä:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_dispute_resolution_keyboard(deal_id, deal_info['buyer_id'], deal_info['seller_id']),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("resolve_"), IsAdmin())
async def resolve_dispute_handler(callback: CallbackQuery, bot: Bot):
    try:
        _, deal_id_str, _, winner_id_str = callback.data.split("_")
        deal_id = int(deal_id_str)
        winner_id = int(winner_id_str)
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞.", show_alert=True)
        return

    result = get_deal_info(deal_id)
    if result['status'] != 'success':
        await callback.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    deal_info = result['data']

    loser_id = deal_info['seller_id'] if winner_id == deal_info['buyer_id'] else deal_info['buyer_id']
    
    resolve_result = resolve_dispute(deal_id, winner_id)

    if resolve_result == "success":
        winner_username = deal_info['buyer_username'] if winner_id == deal_info['buyer_id'] else deal_info['seller_username']
        await callback.message.edit_text(f"‚úÖ –°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É @{winner_username}.", reply_markup=get_back_to_admin_menu_keyboard())

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        try:
            await bot.send_message(winner_id, f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n–°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É.", parse_mode="HTML")
            await bot.send_message(loser_id, f"<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é.</b>\n–°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–µ –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É.", parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ—à–µ–Ω–∏–∏ —Å–ø–æ—Ä–∞: {e}")

    else:
        await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–ø–æ—Ä. –û—à–∏–±–∫–∞: {resolve_result}", show_alert=True)


# --- –°–ë–†–û–° –î–ê–ù–ù–´–• ---

@router.callback_query(F.data == "admin_reset_data_confirm", IsAdmin())
async def admin_reset_data_confirm(callback: CallbackQuery):
    text = """üö® –í–ù–ò–ú–ê–ù–ò–ï! üö®

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫:

- –û–±–Ω—É–ª–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–æ–≤ (–≤–∫–ª—é—á–∞—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
- –£–¥–∞–ª–µ–Ω–∏—é –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–∞.
- –£–¥–∞–ª–µ–Ω–∏—é –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ."""
    await callback.message.edit_text(text, reply_markup=get_admin_reset_confirmation_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_reset_data_execute", IsAdmin())
async def admin_reset_data_execute(callback: CallbackQuery):
    if reset_all_user_data():
        text = "‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã."
    else:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
    
    await callback.message.edit_text(text, reply_markup=get_back_to_admin_menu_keyboard())
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
