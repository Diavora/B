# handlers/start.py
import random
import string

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.inline import get_main_menu_inline, get_market_menu_inline, get_back_to_main_menu_keyboard
from utils.db import add_user, is_user_verified, verify_user

router = Router()

class Captcha(StatesGroup):
    waiting_for_input = State()

CAPTCHA_EMOJIS = ["‚úÖ", "ü§ñ", "‚ú®", "üíé", "üõí", "üéÆ", "üë§", "üî¥", "‚ùì"]

def get_captcha_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–ø—á–∏ —Å —ç–º–æ–¥–∑–∏."""
    emojis = random.sample(CAPTCHA_EMOJIS, 5)
    correct_emoji = random.choice(emojis)

    builder = InlineKeyboardBuilder()
    for emoji in emojis:
        builder.add(InlineKeyboardButton(text=emoji, callback_data=f"captcha:{emoji}"))
    
    builder.adjust(5) # 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
    return builder.as_markup(), correct_emoji

WELCOME_TEXT = """
üíé <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sacred Store!</b> üíé

–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–≥—Ä–æ–≤—ã–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏.

<b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å –¥–µ–ª–∞—Ç—å?</b>
- <b>–ü–æ–∫—É–ø–∞—Ç—å</b> —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
- <b>–ü—Ä–æ–¥–∞–≤–∞—Ç—å</b> —Å–≤–æ–∏ –∏–≥—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.
- <b>–£–ø—Ä–∞–≤–ª—è—Ç—å</b> —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.

–í—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –≥–∞—Ä–∞–Ω—Ç–∞, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.

üëá <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</b>
"""

HELP_TEXT = """
<b>‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

Sacred Store ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –∏–≥—Ä–æ–≤—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>
üõí <b>–ú–∞—Ä–∫–µ—Ç</b> ‚Äî –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –≤—ã–±–∏—Ä–∞—Ç—å –∏–≥—Ä—ã –∏ —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏.
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π.
üî¥ <b>–ü—Ä–æ–¥–∞—Ç—å</b> ‚Äî —Ä–∞–∑–¥–µ–ª –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—è?</b>
1. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–∏–º–∞–µ—Ç "–ö—É–ø–∏—Ç—å".
2. –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
3. –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
4. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏ –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü—É.
5. –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å.

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""

async def show_welcome_message(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫—É —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ (–ª–∏–º–∏—Ç 10–ú–ë)
        await message.answer_photo(
            photo=FSInputFile("scar.png")
        )
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–ª–∏–º–∏—Ç 50–ú–ë)
        if 'too big for a photo' in str(e):
            await message.answer_document(
                document=FSInputFile("scar.png")
            )
        else:
            # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫, –º–æ–∂–Ω–æ –∏—Ö –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –º–µ–Ω—é
    await message.answer(
        text=WELCOME_TEXT,
        reply_markup=get_main_menu_inline(),
        parse_mode="HTML"
    )

@router.message(CommandStart())
async def start_command_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø—á—É. –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–µ.
    """
    user_id = message.from_user.id
    username = message.from_user.username
    add_user(user_id, username)

    if is_user_verified(user_id):
        await show_welcome_message(message)
    else:
        keyboard, correct_emoji = get_captcha_keyboard()
        await state.update_data(correct_emoji=correct_emoji)
        await state.set_state(Captcha.waiting_for_input)

        await message.answer(
            f"ü§ñ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏: <b>{correct_emoji}</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("captcha:"), Captcha.waiting_for_input)
async def process_captcha_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–ø—á–∏.
    """
    user_data = await state.get_data()
    correct_emoji = user_data.get('correct_emoji')
    chosen_emoji = callback.data.split(":")[1]

    if chosen_emoji == correct_emoji:
        verify_user(callback.from_user.id)
        await state.clear()
        await callback.message.edit_text("‚úÖ <b>–°–ø–∞—Å–∏–±–æ! –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞.</b>")
        await show_welcome_message(callback.message)
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
        keyboard, new_correct_emoji = get_captcha_keyboard()
        await state.update_data(correct_emoji=new_correct_emoji)
        await callback.message.edit_text(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏: <b>{new_correct_emoji}</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        text=WELCOME_TEXT,
        reply_markup=get_main_menu_inline(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "market_menu")
async def market_menu_handler(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–∞—Ä–∫–µ—Ç'.", reply_markup=get_market_menu_inline())
    await callback.answer()

@router.callback_query(F.data == "help")
async def help_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        text=HELP_TEXT,
        reply_markup=get_back_to_main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
